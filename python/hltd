#!/bin/env python
#
# chkconfig:   2345 81 03
#
import os,sys
sys.path.append('/opt/hltd/python')
sys.path.append('/opt/hltd/lib')
from daemon2 import Daemon2
from hltdconf import initConf
from subprocess import Popen,check_call
from subprocess import PIPE
from applianceumount import stopFUs
from applianceumount import checkMode
import time
import syslog

def startService(daemon,srvInstance):
    if os.getuid() != 0:
      print "Must be root user to do that",':\t\t\t\t [  \033[1;31mFAILED\033[0;39m  ]'
      sys.exit(1)
    #if new version, resource accounting needs to run
    if os.path.exists('/opt/hltd/scratch/new-version'):
      os.remove('/opt/hltd/scratch/new-version')
      proc = check_call(['/opt/hltd/python/fillresources.py'])
    check_call(['rm','-rf','/opt/hltd/scratch/*'])
    check_call(['cp','-R','/opt/hltd/python','/opt/hltd/scratch/'])
    check_call(['cp','-R', '/opt/hltd/cgi','/opt/hltd/scratch/'])
    check_call(['cp','-R','/opt/hltd/scripts','/opt/hltd/scratch/'])
    check_call(['cp','-R','/opt/hltd/json','/opt/hltd/scratch/'])
    #start the service
    daemon.touchLockFile()
    proc = Popen(["/opt/hltd/scratch/python/hltd.py",srvInstance], stdout=PIPE)
    output = proc.communicate()[0]
    tries=3
    while True:
        time.sleep(.1)
        if daemon.silentStatus() and proc.returncode==0:
            print 'Starting hltd instance',srvInstance,':\t\t\t\t [  \033[1;32mOK\033[0;39m  ]'
            daemon.touchLockFile()
            return
        else:
            if proc.returncode==3:sys.exit(0)
            tries-=1
            if tries>0:continue
            print 'Starting hltd instance',srvInstance,':\t\t\t\t [  \033[1;31mFAILED\033[0;39m  ]'
            print output
            sys.exit(1)

def stopHelper(daemon,instance):
    #read configuration file to find location to write stop file
    try:
        conf = initConf(instance)
    except Exception as ex:
        print " CONFIGURATION error:",str(ex),"(check configuration file) [  \033[1;31mFAILED\033[0;39m  ]"
        sys.exit(4)

    if daemon.silentStatus():
        try:
            if os.path.exists(conf.watch_directory+'/populationcontrol'):
                os.remove(conf.watch_directory+'/populationcontrol')
            with  open(conf.watch_directory+'/populationcontrol','w+') as fp: pass
            count = 10
            while count:
                os.stat(conf.watch_directory+'/populationcontrol')
                if count==10:
                    sys.stdout.write(' o.o')
                else:
                    sys.stdout.write('o.o')
                sys.stdout.flush()
                time.sleep(.5)
                count-=1
        except OSError, err:
            time.sleep(.1)
        except IOError, err:
            time.sleep(.1)
        daemon.stop()

if __name__ == "__main__":

    if len(sys.argv) <=2 or sys.argv[2]=="all":
        try:
            instances=[]
            with open('/etc/hltd.instances','r') as fi:
                for line in fi.readlines():
                    lnstrip = line.strip(' \n')
                    if len(lnstrip)>0 and lnstrip.startswith("#")==False:
                        instances.append(lnstrip)
        except:
            instances = ["main"]
    else:
        instances = [sys.argv[2]]

    for instance in instances:
        daemon = Daemon2('hltd',instance)

        if len(sys.argv) >= 2:
            if 'start' == sys.argv[1]:
                startService(daemon,instance)

            elif 'stop' == sys.argv[1]:
                sys.stdout.write('Stopping hltd instance '+instance+':')
                stopHelper(daemon,instance)
                #daemon.stop()

                #determine runlevel
                std_out=""
                try:
                    #@SM note: hack which disables shutdown by calling "init 3" will probably not work with systemd (CC7)
                    #detection of stop called during shutdown or runlevel change
                    p = Popen("/sbin/runlevel", shell=True, stdout=PIPE)
                    p.wait()
                    std_out=p.stdout.read()
                    from_level,to_level = std_out.split('\t')[0].rstrip('\n').strip().split(' ')
                    if to_level.isdigit() and int(to_level) in [0,1,6] and str(from_level)!="1":

                        if stopFUs(instance)==False:

                            #msg = "Shutdown or reboot is cancelled by hltd - FU umount failed! Switching to runlevel 3..."
                            #syslog.syslog("hltd-"+str(instance)+":"+msg)
                            #time.sleep(2)
                            #p = Popen("init 3", shell=True, stdout=PIPE)
                            #p.wait()

                            #@SM: this will almost certainly not work with systemd (calling init 3 to stop shutdown, therefore disable it)
                            syslog.syslog("Unable to trigger remount on some FUs during shutdown")
                            daemon.removeLockFile()
                        else:
                            daemon.removeLockFile()
                    else:
                        if checkMode(instance)=="fu":
                            daemon.removeLockFile()
                        else:
                            print "Lock file remains. Run stop-appliance to unmount FUs."
                except:
                    print "Runlevel:",std_out
                    syslog.syslog("hltd-"+str(instance)+":Exception when determining runlevel:"+str(std_out))


            elif 'stop-appliance' == sys.argv[1]:
                sys.stdout.write('Stopping hltd instance '+instance+':')
                daemon.stop()

                if checkMode(instance)=="fu":
                    print "This command is not supported on FU. Performed only service stop."

                elif stopFUs(instance)==False:
                    print "FU umount failed, lock file remains."
                else:
                    daemon.removeLockFile()

            elif 'stop-light' == sys.argv[1]:
                sys.stdout.write('Stopping hltd instance '+instance+':')
                daemon.stop()
                daemon.removeLockFile()

            elif 'restart' == sys.argv[1]:
                sys.stdout.write('Stopping hltd instance '+instance+':')
                daemon.stop()
                startService(daemon,instance)

            elif 'status' == sys.argv[1]:
                daemon.status()
            else:
                print "Unknown command"
                sys.exit(2)

        else:
            print "usage: %s start|stop|stop-light|restart|status |all|main|instance" % sys.argv[0]
            sys.exit(2)

sys.exit(0)
