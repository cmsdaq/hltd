#!/bin/env python
#
#restart of fff services (elasticsearch and hltd)
#
import os,sys
sys.path.append('/opt/hltd/python')
sys.path.append('/opt/hltd/lib')
from hltd import hltd
from subprocess import Popen
from subprocess import PIPE
from applianceumount import stopFUs
from applianceumount import checkMode
import time
import syslog
import cx_Oracle
import json

def executeService(service,commands):
   arr = [os.path.join('/etc/init.d',service)]
   arr.append(commands)
   proc = Popen(arr, stdout=PIPE)
   output = proc.communicate()[0]
   time.sleep(.1)

   isHltdStatus = service == 'hltd' and 'status' in commands
   if (isHltdStatus and 'is running' in output) or (not isHltdStatus and proc.returncode==0):
       print commands+' '+service+ ':\t\t\t\t [  \033[1;32mOK\033[0;39m  ]'
       return 0
   else:
      print commands + ' ' + service + '  (return code '+str(proc.returncode)+') : [  \033[1;31mFAILED\033[0;39m  ]'
      print 'command output:\n',output
      return proc.returncode

def reconfigureScript(services=['elasticsearch','hltd']):


  if 'hltd' in services and 'elasticsearch' in services:
    proc = Popen(['/sbin/chkconfig', 'fffmeta', 'on'], stdout=PIPE, stderr=PIPE)
    output = proc.communicate()[0]

  #activate services in the boot sequence
  if 'hltd' in services:
      proc = Popen(['/sbin/chkconfig', 'hltd', 'on'], stdout=PIPE, stderr=PIPE)
      output = proc.communicate()[0]

  if 'elasticsearch' in services:
      proc = Popen(['/sbin/chkconfig', 'elasticsearch', 'on'], stdout=PIPE, stderr=PIPE)
      output = proc.communicate()[0]

  if 'hltd' in services:
      proc = Popen(['/etc/init.d/hltd','status'], stdout=PIPE)
      output = proc.communicate()[0]
      if 'is running' in output:
        print "Unable to reconfigure if hltd already running",' [  \033[1;31mFAILED\033[0;39m  ]'
        return 1

  if 'elasticsearch' in services:
      proc = Popen(['/etc/init.d/elasticsearch','status'], stdout=PIPE)
      output = proc.communicate()[0]
      if proc.returncode==0:
        print "Unable to reconfigure if elasticsearch already running",' [  \033[1;31mFAILED\033[0;39m  ]'
        return 1

  #TODO:detect problems in execution of the reconfigure script
  if 'hltd' in services and 'elasticsearch' in services:
    proc = Popen('/opt/fff/configurefff.sh', stdout=PIPE, stderr=PIPE)
  else:
    proc = Popen(['/opt/fff/configurefff.sh',services[0]], stdout=PIPE, stderr=PIPE)
  output = proc.communicate()[0]
  if proc.returncode!=0:
      print 'Failed to run reconfigure script: ',output,' [  \033[1;31mFAILED\033[0;39m  ]'
      return 1
  time.sleep(.1)
  return 0

def isBlacklisted():
    with open('/opt/fff/db.jsn') as dbp:
      dbpj = json.load(dbp)
      oracleUser = dbpj['login']
      oraclePass = dbpj['password']
      oracleDB   = dbpj['sid']
    db = cx_Oracle.connect(oracleUser, oraclePass, oracleDB)
    cursor = db.cursor()
    query = """SELECT h.hostname FROM Daq_Bl_Hosts h, Daq_Bl_Blacklist_Hosts bh, Daq_Bl_Blacklists b, Daq_Bl_Host_Info hi WHERE h.Host_ID = bh.Host_ID and hi.Host_ID = bh.Host_ID and bh.Blacklist_id = b.Blacklist_ID and b.Blacklist_ID IN (SELECT Blacklist_ID  FROM Daq_Bl_Blacklists WHERE Setup_ID = 1 AND Blacklist_ID IN (SELECT MAX(Blacklist_ID) FROM Daq_Bl_Blacklists)) ORDER BY h.hostname"""
    cursor.execute(query)
    blacklist = cursor.fetchall()
    black = [element.split('.')[0] for tupl in blacklist for element in tupl]
    cursor.close()
    db.close()
    if os.uname()[1] in black: return True
    else: return False


if __name__ == "__main__":

  if len(sys.argv) ==2:

    if 'start' == sys.argv[1]:
        if reconfigureScript()==0:
            rc1=executeService('elasticsearch','start')
            rc2=executeService('hltd','start')
            sys.exit(rc1|rc2)
        else:
            sys.exit(1)

    elif 'stop' == sys.argv[1]:
        rc1=executeService('hltd','stop')
        rc2=executeService('elasticsearch','stop')
        sys.exit(rc1|rc2)

    elif 'restart' == sys.argv[1]:

        executeService('hltd','stop')
        executeService('elasticsearch','stop')
        time.sleep(.5)
        if reconfigureScript()==0:
            rc1=executeService('elasticsearch','restart')
            rc2=executeService('hltd','restart')
            sys.exit(rc1|rc2)
        else:
            sys.exit(1)

    elif 'status' == sys.argv[1]:
      rc1=executeService('hltd',sys.argv[1])
      rc2=executeService('elasticsearch',sys.argv[1])
      sys.exit(rc1|rc2)

    elif sys.argv[1].startswith('disable'):
      if (sys.argv[1]=='disableBlacklisted' and isBlacklisted()) or True:
        proc = Popen(['/opt/fff/disablenode.py','hltd,elasticsearch'], stdout=PIPE, stderr=PIPE)
        output = proc.communicate()[0]
        executeService('hltd','stop')
        executeService('elasticsearch','stop')
        proc = Popen('chmod -x /etc/init.d/fff', stdout=PIPE, stderr=PIPE, shell=True)
        output = proc.communicate()[0]
        proc = Popen(['/sbin/chkconfig','elasticsearch','off'], stdout=PIPE, stderr=PIPE)
        output = proc.communicate()[0]
        proc = Popen(['/sbin/chkconfig', 'hltd', 'off'], stdout=PIPE, stderr=PIPE)
        output = proc.communicate()[0]
        proc = Popen(['/sbin/chkconfig', 'fffmeta', 'off'], stdout=PIPE, stderr=PIPE)
        output = proc.communicate()[0]
        print "FFF services are disabled"
    elif 'checkBlacklist' == sys.argv[1]:
        if isBlacklisted():
          print "Host is blacklisted"
          sys.exit(1)
        else:
          print "Host is not blacklisted"
          sys.exit(0)
    else:
      print "Unknown command"
      sys.exit(1)

  elif len(sys.argv) > 2:

        if sys.argv[1]!='hltd' and sys.argv[1]!='elasticsearch':
            print "Unrecognized service",sys.argv[1]
            sys.exit(1)

        if 'start' == sys.argv[2]:

            if reconfigureScript([sys.argv[1]])==0:
                rc1 = executeService(sys.argv[1],'start')
                sys.exit(rc1)
            else:
                sys.exit(1)

        elif 'stop' == sys.argv[2]:
            rc1 = executeService(sys.argv[1],'stop')
            sys.exit(rc1)

        elif 'restart' == sys.argv[2]:
            executeService(sys.argv[1],'stop')

            if reconfigureScript([sys.argv[1]])==0:
                rc1=executeService(sys.argv[1],'restart')
                sys.exit(rc1)
            else:
                sys.exit(1)

        elif 'status' == sys.argv[2]:
            rc1=executeService(sys.argv[1],'status')
            sys.exit(rc1)

        else:
            print "Unknown command"
            sys.exit(1)

  else:
    print "usage: %s |hltd|elasticsearch start|stop|restart|status" % sys.argv[0]
    sys.exit(1)

sys.exit(0)
