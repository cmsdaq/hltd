#!/bin/env python
#
#restart of fff services (hltd)
#
import os,sys
#sys.path.append('/opt/hltd/python')
#sys.path.append('/opt/hltd/lib')
#from hltd import hltd
from subprocess import Popen
from subprocess import PIPE
#from applianceumount import stopFUs
#from applianceumount import checkMode
import time
import syslog
import json
import cx_Oracle

#old style execute service check (sysV)
def executeServiceScript(service,commands):
   arr = ['/opt/hltd/init.d/hltd']
   arr.append(commands)
   proc = Popen(arr, stdout=PIPE)
   output = proc.communicate()[0]
   time.sleep(.1)

   isHltdStatus = service == 'hltd' and 'status' in commands
   if (isHltdStatus and 'is running' in output) or (not isHltdStatus and proc.returncode==0):
       print commands+' '+service+ ':\t\t\t\t [  \033[1;32mOK\033[0;39m  ]'
       return 0
   else:
      print commands + ' ' + service + '  (return code '+str(proc.returncode)+') : [  \033[1;31mFAILED\033[0;39m  ]'
      print 'command output:\n',output
      return proc.returncode

#old style execute service check (sysV)
def executeServiceUnit(service,command='hltd'):
   arr = ['/usr/bin/systemctl',command,service]
   proc = Popen(arr, stdout=PIPE)
   output = proc.communicate()[0]
   #time.sleep(.1)

   isHltdStatus = service == 'hltd' and 'status' == command
   if proc.returncode==0:
       print command+' '+service+ ':\t\t\t\t [  \033[1;32mOK\033[0;39m  ]'
       return 0
   else:
      print '/usr/bin/systemctl ' + command + ' ' + service + '  (return code '+str(proc.returncode)+') : [  \033[1;31mFAILED\033[0;39m  ]'
      print 'command output:\n',output
      return proc.returncode

def reconfigureScript():

    proc = Popen('/opt/fff/configurefff.sh', stdout=PIPE, stderr=PIPE)
    output = proc.communicate()[0]

    if proc.returncode!=0:
      print 'Failed to run reconfigure script: ',output,' [  \033[1;31mFAILED\033[0;39m  ]'
      return 1

    #re-enable self if this is used
    proc = Popen(['/usr/bin/systemctl', 'enable', 'fff'], stdout=PIPE, stderr=PIPE)
    output = proc.communicate()[0]
    proc = Popen(['/usr/bin/systemctl', 'enable', 'hltd'], stdout=PIPE, stderr=PIPE)
    output = proc.communicate()[0]
    return 0

def isBlacklisted():
    with open('/opt/fff/db.jsn') as dbp:
      dbpj = json.load(dbp)
      oracleUser = dbpj['login']
      oraclePass = dbpj['password']
      oracleDB   = dbpj['sid']
    db = cx_Oracle.connect(oracleUser, oraclePass, oracleDB)
    cursor = db.cursor()
    query = """SELECT h.hostname FROM Daq_Bl_Hosts h, Daq_Bl_Blacklist_Hosts bh, Daq_Bl_Blacklists b, Daq_Bl_Host_Info hi WHERE h.Host_ID = bh.Host_ID and hi.Host_ID = bh.Host_ID and bh.Blacklist_id = b.Blacklist_ID and b.Blacklist_ID IN (SELECT Blacklist_ID  FROM Daq_Bl_Blacklists WHERE Setup_ID = 1 AND Blacklist_ID IN (SELECT MAX(Blacklist_ID) FROM Daq_Bl_Blacklists)) ORDER BY h.hostname"""
    cursor.execute(query)
    blacklist = cursor.fetchall()
    black = [element.split('.')[0] for tupl in blacklist for element in tupl]
    cursor.close()
    db.close()
    if os.uname()[1] in black: return True
    else: return False


if __name__ == "__main__":

  if len(sys.argv) ==2:

    #hltd is PartOf style dependency for start/stop
    if 'start' == sys.argv[1]:
        if reconfigureScript()==0:
            sys.exit(0)
        else:
            sys.exit(1)

    elif 'stop' == sys.argv[1]:
        print "stop FFF called"
        sys.exit(0)

    #custom commands:
    elif sys.argv[1] == 'restartUnblacklisted':
        if isBlacklisted():
            print "Machine is blacklisted. Skipping reconfigure/restart of services"
            sys.exit(1)
    
        executeServiceUnit('stop')
        time.sleep(.5)
        if reconfigureScript()==0:
            rc2=executeServiceUnit('hltd','restart')
            sys.exit(rc2)
        else:
            sys.exit(1)
    elif 'restart' == sys.argv[1]:
      print "Use /usr/bin/systemctl for this"

    elif 'status' == sys.argv[1]:
      #old style status
      rc1=executeServiceScript('hltd',sys.argv[1])
      sys.exit(rc1)

    elif 'configure' == sys.argv[1]:
      #only update configuration
      rc=reconfigureScript()
      sys.exit(rc)

    elif sys.argv[1].startswith('disable'):
      if (sys.argv[1]=='disableBlacklisted' and isBlacklisted()) or True:
        proc = Popen(['python','/opt/fff/setupmachine.py','disable'], stdout=PIPE, stderr=PIPE, shell=False)
        output = proc.communicate()[0]
        executeServiceUnit('stop')
        proc = Popen(['/usr/bin/systemctl','disable','hltd'], stdout=PIPE, stderr=PIPE, shell=False)
        output = proc.communicate()[0]
        proc = Popen(['/usr/bin/systemctl','disable','fff'], stdout=PIPE, stderr=PIPE, shell=False)
        output = proc.communicate()[0]
        print "FFF services are disabled"

    elif 'checkBlacklist' == sys.argv[1]:
        if isBlacklisted():
          print "Host is blacklisted"
          sys.exit(1)
        else:
          print "Host is not blacklisted"
          sys.exit(0)
    else:
      print "Unknown command"
      sys.exit(1)

  else:
    print "usage: %s fff start|stop|status|disable|restartUnblacklisted" % sys.argv[0]
    sys.exit(1)

sys.exit(0)
