#!/bin/env python
from __future__ import print_function

#restart fff services (hltd and soap2file)

import os,sys
from subprocess import Popen
from subprocess import PIPE
import time
import syslog
import json
import cx_Oracle


#new service command (systemd units)
def executeServiceUnit(command,service):
   arr = ['/usr/bin/systemctl',command,service]
   proc = Popen(arr, stdout=PIPE)
   output = proc.communicate()[0]
   if not isinstance(output,str): output = output.decode("utf-8")
   #time.sleep(.1)

   isHltdStatus = service == 'hltd' and 'status' == command
   if proc.returncode==0:
       print(command+' '+service+ ':\t\t\t\t [  \033[1;32mOK\033[0;39m  ]')
       return 0
   else:
      print('/usr/bin/systemctl ' + command + ' ' + service + '  (return code '+str(proc.returncode)+') : [  \033[1;31mFAILED\033[0;39m  ]')
      print('command output:\n',str(output))
      return proc.returncode


def reconfigureScript(verbose=False):
    proc = Popen(['/opt/fff/setupmachine.py','configure'], stdout=PIPE, stderr=PIPE)
    output = proc.communicate()[0]
    if not isinstance(output,str): output = output.decode("utf-8")

    if proc.returncode!=0:
      print('Failed to run reconfigure script: ',str(output),' [  \033[1;31mFAILED\033[0;39m  ]')
      syslog.syslog('Failed to run reconfigure script: ' + str(output))
      return 1
    elif verbose:
      print(str(output))
    return 0

def reconfigureScriptForce():
    proc = Popen(['/opt/fff/setupmachine.py','forceConfigure'], stdout=PIPE, stderr=PIPE)
    output = proc.communicate()[0]

    if proc.returncode!=0:
      print('Failed to run reconfigure script (force): ',str(output),' [  \033[1;31mFAILED\033[0;39m  ]')
      syslog.syslog('Failed to run reconfigure script (force): ' + str(output))
      return 1
    return 0


def disableServices():
    #disable all FFF services on this machine
    proc = Popen(['/usr/bin/systemctl','disable','hltd'], stdout=PIPE, stderr=PIPE, shell=False)
    output = proc.communicate()[0]
    proc = Popen(['/usr/bin/systemctl','disable','fff'], stdout=PIPE, stderr=PIPE, shell=False)
    output = proc.communicate()[0]
    proc = Popen(['/usr/bin/systemctl','disable','soap2file'], stdout=PIPE, stderr=PIPE, shell=False)
    output = proc.communicate()[0]


def reenableServices():
    #enable all FFF services on this machine
    proc = Popen(['/usr/bin/systemctl', 'reenable', 'fff'], stdout=PIPE, stderr=PIPE, shell=False)
    output = proc.communicate()[0]
    proc = Popen(['/usr/bin/systemctl', 'reenable', 'hltd'], stdout=PIPE, stderr=PIPE, shell=False)
    output = proc.communicate()[0]
    proc = Popen(['/usr/bin/systemctl', 'reenable', 'soap2file'], stdout=PIPE, stderr=PIPE, shell=False)
    output = proc.communicate()[0]


def isBlacklisted():
    with open('/opt/fff/db.jsn') as dbp:
      dbpj = json.load(dbp)
      oracleUser = dbpj['login']
      oraclePass = dbpj['password']
      oracleDB   = dbpj['sid']
    db = cx_Oracle.connect(oracleUser, oraclePass, oracleDB)
    cursor = db.cursor()
    query = """SELECT h.hostname FROM Daq_Bl_Hosts h, Daq_Bl_Blacklist_Hosts bh, Daq_Bl_Blacklists b, Daq_Bl_Host_Info hi WHERE h.Host_ID = bh.Host_ID and hi.Host_ID = bh.Host_ID and bh.Blacklist_id = b.Blacklist_ID and b.Blacklist_ID IN (SELECT Blacklist_ID  FROM Daq_Bl_Blacklists WHERE Setup_ID = 1 AND Blacklist_ID IN (SELECT MAX(Blacklist_ID) FROM Daq_Bl_Blacklists)) ORDER BY h.hostname"""
    cursor.execute(query)
    blacklist = cursor.fetchall()
    black = [element.split('.')[0] for tupl in blacklist for element in tupl]
    cursor.close()
    db.close()
    if os.uname()[1] in black: return True
    else: return False


if __name__ == "__main__":

  if len(sys.argv) == 2:

    cmd = sys.argv[1]

    #used by systemd. If called via systemd, it will take care of subservices (however, only for "stop" and "restart")
    if 'start' == cmd:
        rc = reconfigureScript(True)
        sys.exit(rc)

    elif 'stop' == cmd:
        print("stop FFF called")
        sys.exit(0)

    elif 'status' == cmd:
       executeServiceUnit(cmd,'hltd')
       sys.exit(0)

    #non-systemd commands:
    elif 'restartUnblacklisted' == cmd:
        if isBlacklisted():
            print("Machine is blacklisted. Skipping reconfigure/restart of services")
            sys.exit(1)
        else:
            proc = Popen(['/usr/bin/systemctl', 'restart', 'fff'], stdout=PIPE, stderr=PIPE, shell=False)
            output = proc.communicate()[0]
            if not isinstance(output,str): output = output.decode("utf-8")
            if proc.returncode!=0:
                print(str(output))
                sys.exit(proc.returncode)

    elif 'restart' == cmd:
        print("Use: /usr/bin/systemctl restart fff")

    elif 'configure' == cmd:
        #only update configuration (same as start)
        rc=reconfigureScript(True)
        sys.exit(rc)

    elif 'forceConfigure' == cmd:
        #only update configuration (same as start) but also reset all resources (including cloud)
        rc=reconfigureScriptForce()
        sys.exit(rc)

    elif 'disableBlacklisted' == cmd:
        if isBlacklisted():
            rc=executeServiceUnit('stop','fff')
            disableServices()
            #prevent from being manually started by setting disabled in hltd.conf
            proc = Popen(['/opt/fff/setupmachine.py','disable'], stdout=PIPE, stderr=PIPE, shell=False)
            output = proc.communicate()[0]
            if not isinstance(output,str): output = output.decode("utf-8")
            if rc==0:
                print("FFF services are disabled")
            sys.exit(rc)

    elif 'restoreUnblacklisted' == cmd:
        if not isBlacklisted():
            rc=reconfigureScript(True)
            if rc==0:
                reenableServices()
                rc=executeServiceUnit('restart','fff')
                if rc==0:
                    print("FFF services are restored")
            sys.exit(rc)

    elif 'disableBoot' == cmd:
        disableServices()
        print("FFF services are disabled at boot")

    elif 'enableBoot' == cmd:
        reenableServices()
        print("FFF services are enabled at boot")

    elif 'checkBlacklist' == cmd:
        if isBlacklisted():
            print("Host is blacklisted")
            sys.exit(1)
        else:
            print("Host is not blacklisted")
            sys.exit(0)

    else:
        print("Unknown command")
        sys.exit(1)

  else:
      print("usage: %s start|stop|configure|enableBoot|disableBoot|restartUnblacklisted|disableBlacklisted|restoreUnblacklisted" % sys.argv[0])
      sys.exit(1)

sys.exit(0)
